{"version":3,"sources":["skylark-underscore.js"],"names":["define","skylark","root","self","global","this","previousUnderscore","_","ArrayProto","Array","prototype","ObjProto","Object","SymbolProto","Symbol","push","slice","toString","hasOwnProperty","nativeIsArray","isArray","nativeKeys","keys","nativeCreate","create","Ctor","obj","_wrapped","exports","nodeType","module","VERSION","builtinIteratee","optimizeCb","func","context","argCount","value","call","index","collection","accumulator","apply","arguments","cb","iteratee","identity","isFunction","isObject","matcher","property","Infinity","restArguments","startIndex","length","Math","max","rest","args","baseCreate","result","shallowProperty","key","has","path","deepGet","i","MAX_ARRAY_INDEX","pow","getLength","isArrayLike","each","forEach","map","collect","results","currentKey","createReduce","dir","memo","initial","reducer","reduce","foldl","inject","reduceRight","foldr","find","detect","predicate","keyFinder","findIndex","findKey","filter","select","list","reject","negate","every","all","some","any","contains","includes","include","item","fromIndex","guard","values","indexOf","invoke","contextPath","method","pluck","where","attrs","findWhere","computed","lastComputed","v","min","shuffle","sample","n","random","clone","last","rand","temp","sortBy","criteria","sort","left","right","a","b","group","behavior","partition","groupBy","indexBy","countBy","reStrSymbol","toArray","isString","match","size","pass","first","head","take","array","tail","drop","compact","Boolean","flatten","input","shallow","strict","output","idx","isArguments","j","len","without","otherArrays","difference","uniq","unique","isSorted","isBoolean","seen","union","arrays","intersection","argsLength","unzip","zip","object","createPredicateIndexFinder","findLastIndex","sortedIndex","low","high","mid","floor","createIndexFinder","predicateFind","isNaN","lastIndexOf","range","start","stop","step","ceil","chunk","count","executeBound","sourceFunc","boundFunc","callingContext","bind","TypeError","bound","callArgs","concat","partial","boundArgs","placeholder","position","bindAll","Error","memoize","hasher","cache","address","delay","wait","setTimeout","defer","throttle","options","timeout","previous","later","leading","now","throttled","remaining","clearTimeout","trailing","cancel","debounce","immediate","debounced","callNow","wrap","wrapper","compose","after","times","before","once","hasEnumBug","propertyIsEnumerable","nonEnumerableProps","collectNonEnumProps","nonEnumIdx","constructor","proto","prop","allKeys","mapObject","pairs","invert","functions","methods","names","createAssigner","keysFunc","defaults","source","l","extend","extendOwn","assign","eq","deepEq","keyInObj","pick","omit","String","props","tap","interceptor","isMatch","aStack","bStack","type","className","valueOf","areArrays","aCtor","bCtor","pop","isEqual","isEmpty","isElement","name","nodelist","document","childNodes","Int8Array","isFinite","isSymbol","parseFloat","isNumber","isNull","isUndefined","noConflict","constant","noop","propertyOf","matches","accum","Date","getTime","escapeMap","&","<",">","\"","'","`","unescapeMap","createEscaper","escaper","join","testRegexp","RegExp","replaceRegexp","string","test","replace","escape","unescape","fallback","idCounter","uniqueId","prefix","id","templateSettings","evaluate","interpolate","noMatch","escapes","\\","\r","\n"," "," ","escapeRegExp","escapeChar","template","text","settings","oldSettings","render","offset","variable","Function","e","data","argument","chain","instance","_chain","chainResult","mixin","toJSON","itg","skyalrk","underscore","main"],"mappings":"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","file":"../skylark-underscore.js","sourcesContent":["define('skylark-underscore/underscore',[\r\n\t\"skylark-langx/skylark\"\r\n],function(skylark){\r\n//     Underscore.js 1.9.1\r\n//     http://underscorejs.org\r\n//     (c) 2009-2018 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\r\n//     Underscore may be freely distributed under the MIT license.\r\n\r\n  // Baseline setup\r\n  // --------------\r\n\r\n  // Establish the root object, `window` (`self`) in the browser, `global`\r\n  // on the server, or `this` in some virtual machines. We use `self`\r\n  // instead of `window` for `WebWorker` support.\r\n  var root = typeof self == 'object' && self.self === self && self ||\r\n            typeof global == 'object' && global.global === global && global ||\r\n            this ||\r\n            {};\r\n\r\n  // Save the previous value of the `_` variable.\r\n  var previousUnderscore = root._;\r\n\r\n  // Save bytes in the minified (but not gzipped) version:\r\n  var ArrayProto = Array.prototype, ObjProto = Object.prototype;\r\n  var SymbolProto = typeof Symbol !== 'undefined' ? Symbol.prototype : null;\r\n\r\n  // Create quick reference variables for speed access to core prototypes.\r\n  var push = ArrayProto.push,\r\n      slice = ArrayProto.slice,\r\n      toString = ObjProto.toString,\r\n      hasOwnProperty = ObjProto.hasOwnProperty;\r\n\r\n  // All **ECMAScript 5** native function implementations that we hope to use\r\n  // are declared here.\r\n  var nativeIsArray = Array.isArray,\r\n      nativeKeys = Object.keys,\r\n      nativeCreate = Object.create;\r\n\r\n  // Naked function reference for surrogate-prototype-swapping.\r\n  var Ctor = function(){};\r\n\r\n  // Create a safe reference to the Underscore object for use below.\r\n  var _ = function(obj) {\r\n    if (obj instanceof _) return obj;\r\n    if (!(this instanceof _)) return new _(obj);\r\n    this._wrapped = obj;\r\n  };\r\n\r\n  // Export the Underscore object for **Node.js**, with\r\n  // backwards-compatibility for their old module API. If we're in\r\n  // the browser, add `_` as a global object.\r\n  // (`nodeType` is checked to ensure that `module`\r\n  // and `exports` are not HTML elements.)\r\n  if (typeof exports != 'undefined' && !exports.nodeType) {\r\n    if (typeof module != 'undefined' && !module.nodeType && module.exports) {\r\n      exports = module.exports = _;\r\n    }\r\n    exports._ = _;\r\n  } else {\r\n    root._ = _;\r\n  }\r\n\r\n  // Current version.\r\n  _.VERSION = '1.9.1';\r\n\r\n  // Internal function that returns an efficient (for current engines) version\r\n  // of the passed-in callback, to be repeatedly applied in other Underscore\r\n  // functions.\r\n  var optimizeCb = function(func, context, argCount) {\r\n    if (context === void 0) return func;\r\n    switch (argCount == null ? 3 : argCount) {\r\n      case 1: return function(value) {\r\n        return func.call(context, value);\r\n      };\r\n      // The 2-argument case is omitted because we’re not using it.\r\n      case 3: return function(value, index, collection) {\r\n        return func.call(context, value, index, collection);\r\n      };\r\n      case 4: return function(accumulator, value, index, collection) {\r\n        return func.call(context, accumulator, value, index, collection);\r\n      };\r\n    }\r\n    return function() {\r\n      return func.apply(context, arguments);\r\n    };\r\n  };\r\n\r\n  var builtinIteratee;\r\n\r\n  // An internal function to generate callbacks that can be applied to each\r\n  // element in a collection, returning the desired result — either `identity`,\r\n  // an arbitrary callback, a property matcher, or a property accessor.\r\n  var cb = function(value, context, argCount) {\r\n    if (_.iteratee !== builtinIteratee) return _.iteratee(value, context);\r\n    if (value == null) return _.identity;\r\n    if (_.isFunction(value)) return optimizeCb(value, context, argCount);\r\n    if (_.isObject(value) && !_.isArray(value)) return _.matcher(value);\r\n    return _.property(value);\r\n  };\r\n\r\n  // External wrapper for our callback generator. Users may customize\r\n  // `_.iteratee` if they want additional predicate/iteratee shorthand styles.\r\n  // This abstraction hides the internal-only argCount argument.\r\n  _.iteratee = builtinIteratee = function(value, context) {\r\n    return cb(value, context, Infinity);\r\n  };\r\n\r\n  // Some functions take a variable number of arguments, or a few expected\r\n  // arguments at the beginning and then a variable number of values to operate\r\n  // on. This helper accumulates all remaining arguments past the function’s\r\n  // argument length (or an explicit `startIndex`), into an array that becomes\r\n  // the last argument. Similar to ES6’s \"rest parameter\".\r\n  var restArguments = function(func, startIndex) {\r\n    startIndex = startIndex == null ? func.length - 1 : +startIndex;\r\n    return function() {\r\n      var length = Math.max(arguments.length - startIndex, 0),\r\n          rest = Array(length),\r\n          index = 0;\r\n      for (; index < length; index++) {\r\n        rest[index] = arguments[index + startIndex];\r\n      }\r\n      switch (startIndex) {\r\n        case 0: return func.call(this, rest);\r\n        case 1: return func.call(this, arguments[0], rest);\r\n        case 2: return func.call(this, arguments[0], arguments[1], rest);\r\n      }\r\n      var args = Array(startIndex + 1);\r\n      for (index = 0; index < startIndex; index++) {\r\n        args[index] = arguments[index];\r\n      }\r\n      args[startIndex] = rest;\r\n      return func.apply(this, args);\r\n    };\r\n  };\r\n\r\n  // An internal function for creating a new object that inherits from another.\r\n  var baseCreate = function(prototype) {\r\n    if (!_.isObject(prototype)) return {};\r\n    if (nativeCreate) return nativeCreate(prototype);\r\n    Ctor.prototype = prototype;\r\n    var result = new Ctor;\r\n    Ctor.prototype = null;\r\n    return result;\r\n  };\r\n\r\n  var shallowProperty = function(key) {\r\n    return function(obj) {\r\n      return obj == null ? void 0 : obj[key];\r\n    };\r\n  };\r\n\r\n  var has = function(obj, path) {\r\n    return obj != null && hasOwnProperty.call(obj, path);\r\n  }\r\n\r\n  var deepGet = function(obj, path) {\r\n    var length = path.length;\r\n    for (var i = 0; i < length; i++) {\r\n      if (obj == null) return void 0;\r\n      obj = obj[path[i]];\r\n    }\r\n    return length ? obj : void 0;\r\n  };\r\n\r\n  // Helper for collection methods to determine whether a collection\r\n  // should be iterated as an array or as an object.\r\n  // Related: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-tolength\r\n  // Avoids a very nasty iOS 8 JIT bug on ARM-64. #2094\r\n  var MAX_ARRAY_INDEX = Math.pow(2, 53) - 1;\r\n  var getLength = shallowProperty('length');\r\n  var isArrayLike = function(collection) {\r\n    var length = getLength(collection);\r\n    return typeof length == 'number' && length >= 0 && length <= MAX_ARRAY_INDEX;\r\n  };\r\n\r\n  // Collection Functions\r\n  // --------------------\r\n\r\n  // The cornerstone, an `each` implementation, aka `forEach`.\r\n  // Handles raw objects in addition to array-likes. Treats all\r\n  // sparse array-likes as if they were dense.\r\n  _.each = _.forEach = function(obj, iteratee, context) {\r\n    iteratee = optimizeCb(iteratee, context);\r\n    var i, length;\r\n    if (isArrayLike(obj)) {\r\n      for (i = 0, length = obj.length; i < length; i++) {\r\n        iteratee(obj[i], i, obj);\r\n      }\r\n    } else {\r\n      var keys = _.keys(obj);\r\n      for (i = 0, length = keys.length; i < length; i++) {\r\n        iteratee(obj[keys[i]], keys[i], obj);\r\n      }\r\n    }\r\n    return obj;\r\n  };\r\n\r\n  // Return the results of applying the iteratee to each element.\r\n  _.map = _.collect = function(obj, iteratee, context) {\r\n    iteratee = cb(iteratee, context);\r\n    var keys = !isArrayLike(obj) && _.keys(obj),\r\n        length = (keys || obj).length,\r\n        results = Array(length);\r\n    for (var index = 0; index < length; index++) {\r\n      var currentKey = keys ? keys[index] : index;\r\n      results[index] = iteratee(obj[currentKey], currentKey, obj);\r\n    }\r\n    return results;\r\n  };\r\n\r\n  // Create a reducing function iterating left or right.\r\n  var createReduce = function(dir) {\r\n    // Wrap code that reassigns argument variables in a separate function than\r\n    // the one that accesses `arguments.length` to avoid a perf hit. (#1991)\r\n    var reducer = function(obj, iteratee, memo, initial) {\r\n      var keys = !isArrayLike(obj) && _.keys(obj),\r\n          length = (keys || obj).length,\r\n          index = dir > 0 ? 0 : length - 1;\r\n      if (!initial) {\r\n        memo = obj[keys ? keys[index] : index];\r\n        index += dir;\r\n      }\r\n      for (; index >= 0 && index < length; index += dir) {\r\n        var currentKey = keys ? keys[index] : index;\r\n        memo = iteratee(memo, obj[currentKey], currentKey, obj);\r\n      }\r\n      return memo;\r\n    };\r\n\r\n    return function(obj, iteratee, memo, context) {\r\n      var initial = arguments.length >= 3;\r\n      return reducer(obj, optimizeCb(iteratee, context, 4), memo, initial);\r\n    };\r\n  };\r\n\r\n  // **Reduce** builds up a single result from a list of values, aka `inject`,\r\n  // or `foldl`.\r\n  _.reduce = _.foldl = _.inject = createReduce(1);\r\n\r\n  // The right-associative version of reduce, also known as `foldr`.\r\n  _.reduceRight = _.foldr = createReduce(-1);\r\n\r\n  // Return the first value which passes a truth test. Aliased as `detect`.\r\n  _.find = _.detect = function(obj, predicate, context) {\r\n    var keyFinder = isArrayLike(obj) ? _.findIndex : _.findKey;\r\n    var key = keyFinder(obj, predicate, context);\r\n    if (key !== void 0 && key !== -1) return obj[key];\r\n  };\r\n\r\n  // Return all the elements that pass a truth test.\r\n  // Aliased as `select`.\r\n  _.filter = _.select = function(obj, predicate, context) {\r\n    var results = [];\r\n    predicate = cb(predicate, context);\r\n    _.each(obj, function(value, index, list) {\r\n      if (predicate(value, index, list)) results.push(value);\r\n    });\r\n    return results;\r\n  };\r\n\r\n  // Return all the elements for which a truth test fails.\r\n  _.reject = function(obj, predicate, context) {\r\n    return _.filter(obj, _.negate(cb(predicate)), context);\r\n  };\r\n\r\n  // Determine whether all of the elements match a truth test.\r\n  // Aliased as `all`.\r\n  _.every = _.all = function(obj, predicate, context) {\r\n    predicate = cb(predicate, context);\r\n    var keys = !isArrayLike(obj) && _.keys(obj),\r\n        length = (keys || obj).length;\r\n    for (var index = 0; index < length; index++) {\r\n      var currentKey = keys ? keys[index] : index;\r\n      if (!predicate(obj[currentKey], currentKey, obj)) return false;\r\n    }\r\n    return true;\r\n  };\r\n\r\n  // Determine if at least one element in the object matches a truth test.\r\n  // Aliased as `any`.\r\n  _.some = _.any = function(obj, predicate, context) {\r\n    predicate = cb(predicate, context);\r\n    var keys = !isArrayLike(obj) && _.keys(obj),\r\n        length = (keys || obj).length;\r\n    for (var index = 0; index < length; index++) {\r\n      var currentKey = keys ? keys[index] : index;\r\n      if (predicate(obj[currentKey], currentKey, obj)) return true;\r\n    }\r\n    return false;\r\n  };\r\n\r\n  // Determine if the array or object contains a given item (using `===`).\r\n  // Aliased as `includes` and `include`.\r\n  _.contains = _.includes = _.include = function(obj, item, fromIndex, guard) {\r\n    if (!isArrayLike(obj)) obj = _.values(obj);\r\n    if (typeof fromIndex != 'number' || guard) fromIndex = 0;\r\n    return _.indexOf(obj, item, fromIndex) >= 0;\r\n  };\r\n\r\n  // Invoke a method (with arguments) on every item in a collection.\r\n  _.invoke = restArguments(function(obj, path, args) {\r\n    var contextPath, func;\r\n    if (_.isFunction(path)) {\r\n      func = path;\r\n    } else if (_.isArray(path)) {\r\n      contextPath = path.slice(0, -1);\r\n      path = path[path.length - 1];\r\n    }\r\n    return _.map(obj, function(context) {\r\n      var method = func;\r\n      if (!method) {\r\n        if (contextPath && contextPath.length) {\r\n          context = deepGet(context, contextPath);\r\n        }\r\n        if (context == null) return void 0;\r\n        method = context[path];\r\n      }\r\n      return method == null ? method : method.apply(context, args);\r\n    });\r\n  });\r\n\r\n  // Convenience version of a common use case of `map`: fetching a property.\r\n  _.pluck = function(obj, key) {\r\n    return _.map(obj, _.property(key));\r\n  };\r\n\r\n  // Convenience version of a common use case of `filter`: selecting only objects\r\n  // containing specific `key:value` pairs.\r\n  _.where = function(obj, attrs) {\r\n    return _.filter(obj, _.matcher(attrs));\r\n  };\r\n\r\n  // Convenience version of a common use case of `find`: getting the first object\r\n  // containing specific `key:value` pairs.\r\n  _.findWhere = function(obj, attrs) {\r\n    return _.find(obj, _.matcher(attrs));\r\n  };\r\n\r\n  // Return the maximum element (or element-based computation).\r\n  _.max = function(obj, iteratee, context) {\r\n    var result = -Infinity, lastComputed = -Infinity,\r\n        value, computed;\r\n    if (iteratee == null || typeof iteratee == 'number' && typeof obj[0] != 'object' && obj != null) {\r\n      obj = isArrayLike(obj) ? obj : _.values(obj);\r\n      for (var i = 0, length = obj.length; i < length; i++) {\r\n        value = obj[i];\r\n        if (value != null && value > result) {\r\n          result = value;\r\n        }\r\n      }\r\n    } else {\r\n      iteratee = cb(iteratee, context);\r\n      _.each(obj, function(v, index, list) {\r\n        computed = iteratee(v, index, list);\r\n        if (computed > lastComputed || computed === -Infinity && result === -Infinity) {\r\n          result = v;\r\n          lastComputed = computed;\r\n        }\r\n      });\r\n    }\r\n    return result;\r\n  };\r\n\r\n  // Return the minimum element (or element-based computation).\r\n  _.min = function(obj, iteratee, context) {\r\n    var result = Infinity, lastComputed = Infinity,\r\n        value, computed;\r\n    if (iteratee == null || typeof iteratee == 'number' && typeof obj[0] != 'object' && obj != null) {\r\n      obj = isArrayLike(obj) ? obj : _.values(obj);\r\n      for (var i = 0, length = obj.length; i < length; i++) {\r\n        value = obj[i];\r\n        if (value != null && value < result) {\r\n          result = value;\r\n        }\r\n      }\r\n    } else {\r\n      iteratee = cb(iteratee, context);\r\n      _.each(obj, function(v, index, list) {\r\n        computed = iteratee(v, index, list);\r\n        if (computed < lastComputed || computed === Infinity && result === Infinity) {\r\n          result = v;\r\n          lastComputed = computed;\r\n        }\r\n      });\r\n    }\r\n    return result;\r\n  };\r\n\r\n  // Shuffle a collection.\r\n  _.shuffle = function(obj) {\r\n    return _.sample(obj, Infinity);\r\n  };\r\n\r\n  // Sample **n** random values from a collection using the modern version of the\r\n  // [Fisher-Yates shuffle](http://en.wikipedia.org/wiki/Fisher–Yates_shuffle).\r\n  // If **n** is not specified, returns a single random element.\r\n  // The internal `guard` argument allows it to work with `map`.\r\n  _.sample = function(obj, n, guard) {\r\n    if (n == null || guard) {\r\n      if (!isArrayLike(obj)) obj = _.values(obj);\r\n      return obj[_.random(obj.length - 1)];\r\n    }\r\n    var sample = isArrayLike(obj) ? _.clone(obj) : _.values(obj);\r\n    var length = getLength(sample);\r\n    n = Math.max(Math.min(n, length), 0);\r\n    var last = length - 1;\r\n    for (var index = 0; index < n; index++) {\r\n      var rand = _.random(index, last);\r\n      var temp = sample[index];\r\n      sample[index] = sample[rand];\r\n      sample[rand] = temp;\r\n    }\r\n    return sample.slice(0, n);\r\n  };\r\n\r\n  // Sort the object's values by a criterion produced by an iteratee.\r\n  _.sortBy = function(obj, iteratee, context) {\r\n    var index = 0;\r\n    iteratee = cb(iteratee, context);\r\n    return _.pluck(_.map(obj, function(value, key, list) {\r\n      return {\r\n        value: value,\r\n        index: index++,\r\n        criteria: iteratee(value, key, list)\r\n      };\r\n    }).sort(function(left, right) {\r\n      var a = left.criteria;\r\n      var b = right.criteria;\r\n      if (a !== b) {\r\n        if (a > b || a === void 0) return 1;\r\n        if (a < b || b === void 0) return -1;\r\n      }\r\n      return left.index - right.index;\r\n    }), 'value');\r\n  };\r\n\r\n  // An internal function used for aggregate \"group by\" operations.\r\n  var group = function(behavior, partition) {\r\n    return function(obj, iteratee, context) {\r\n      var result = partition ? [[], []] : {};\r\n      iteratee = cb(iteratee, context);\r\n      _.each(obj, function(value, index) {\r\n        var key = iteratee(value, index, obj);\r\n        behavior(result, value, key);\r\n      });\r\n      return result;\r\n    };\r\n  };\r\n\r\n  // Groups the object's values by a criterion. Pass either a string attribute\r\n  // to group by, or a function that returns the criterion.\r\n  _.groupBy = group(function(result, value, key) {\r\n    if (has(result, key)) result[key].push(value); else result[key] = [value];\r\n  });\r\n\r\n  // Indexes the object's values by a criterion, similar to `groupBy`, but for\r\n  // when you know that your index values will be unique.\r\n  _.indexBy = group(function(result, value, key) {\r\n    result[key] = value;\r\n  });\r\n\r\n  // Counts instances of an object that group by a certain criterion. Pass\r\n  // either a string attribute to count by, or a function that returns the\r\n  // criterion.\r\n  _.countBy = group(function(result, value, key) {\r\n    if (has(result, key)) result[key]++; else result[key] = 1;\r\n  });\r\n\r\n  var reStrSymbol = /[^\\ud800-\\udfff]|[\\ud800-\\udbff][\\udc00-\\udfff]|[\\ud800-\\udfff]/g;\r\n  // Safely create a real, live array from anything iterable.\r\n  _.toArray = function(obj) {\r\n    if (!obj) return [];\r\n    if (_.isArray(obj)) return slice.call(obj);\r\n    if (_.isString(obj)) {\r\n      // Keep surrogate pair characters together\r\n      return obj.match(reStrSymbol);\r\n    }\r\n    if (isArrayLike(obj)) return _.map(obj, _.identity);\r\n    return _.values(obj);\r\n  };\r\n\r\n  // Return the number of elements in an object.\r\n  _.size = function(obj) {\r\n    if (obj == null) return 0;\r\n    return isArrayLike(obj) ? obj.length : _.keys(obj).length;\r\n  };\r\n\r\n  // Split a collection into two arrays: one whose elements all satisfy the given\r\n  // predicate, and one whose elements all do not satisfy the predicate.\r\n  _.partition = group(function(result, value, pass) {\r\n    result[pass ? 0 : 1].push(value);\r\n  }, true);\r\n\r\n  // Array Functions\r\n  // ---------------\r\n\r\n  // Get the first element of an array. Passing **n** will return the first N\r\n  // values in the array. Aliased as `head` and `take`. The **guard** check\r\n  // allows it to work with `_.map`.\r\n  _.first = _.head = _.take = function(array, n, guard) {\r\n    if (array == null || array.length < 1) return n == null ? void 0 : [];\r\n    if (n == null || guard) return array[0];\r\n    return _.initial(array, array.length - n);\r\n  };\r\n\r\n  // Returns everything but the last entry of the array. Especially useful on\r\n  // the arguments object. Passing **n** will return all the values in\r\n  // the array, excluding the last N.\r\n  _.initial = function(array, n, guard) {\r\n    return slice.call(array, 0, Math.max(0, array.length - (n == null || guard ? 1 : n)));\r\n  };\r\n\r\n  // Get the last element of an array. Passing **n** will return the last N\r\n  // values in the array.\r\n  _.last = function(array, n, guard) {\r\n    if (array == null || array.length < 1) return n == null ? void 0 : [];\r\n    if (n == null || guard) return array[array.length - 1];\r\n    return _.rest(array, Math.max(0, array.length - n));\r\n  };\r\n\r\n  // Returns everything but the first entry of the array. Aliased as `tail` and `drop`.\r\n  // Especially useful on the arguments object. Passing an **n** will return\r\n  // the rest N values in the array.\r\n  _.rest = _.tail = _.drop = function(array, n, guard) {\r\n    return slice.call(array, n == null || guard ? 1 : n);\r\n  };\r\n\r\n  // Trim out all falsy values from an array.\r\n  _.compact = function(array) {\r\n    return _.filter(array, Boolean);\r\n  };\r\n\r\n  // Internal implementation of a recursive `flatten` function.\r\n  var flatten = function(input, shallow, strict, output) {\r\n    output = output || [];\r\n    var idx = output.length;\r\n    for (var i = 0, length = getLength(input); i < length; i++) {\r\n      var value = input[i];\r\n      if (isArrayLike(value) && (_.isArray(value) || _.isArguments(value))) {\r\n        // Flatten current level of array or arguments object.\r\n        if (shallow) {\r\n          var j = 0, len = value.length;\r\n          while (j < len) output[idx++] = value[j++];\r\n        } else {\r\n          flatten(value, shallow, strict, output);\r\n          idx = output.length;\r\n        }\r\n      } else if (!strict) {\r\n        output[idx++] = value;\r\n      }\r\n    }\r\n    return output;\r\n  };\r\n\r\n  // Flatten out an array, either recursively (by default), or just one level.\r\n  _.flatten = function(array, shallow) {\r\n    return flatten(array, shallow, false);\r\n  };\r\n\r\n  // Return a version of the array that does not contain the specified value(s).\r\n  _.without = restArguments(function(array, otherArrays) {\r\n    return _.difference(array, otherArrays);\r\n  });\r\n\r\n  // Produce a duplicate-free version of the array. If the array has already\r\n  // been sorted, you have the option of using a faster algorithm.\r\n  // The faster algorithm will not work with an iteratee if the iteratee\r\n  // is not a one-to-one function, so providing an iteratee will disable\r\n  // the faster algorithm.\r\n  // Aliased as `unique`.\r\n  _.uniq = _.unique = function(array, isSorted, iteratee, context) {\r\n    if (!_.isBoolean(isSorted)) {\r\n      context = iteratee;\r\n      iteratee = isSorted;\r\n      isSorted = false;\r\n    }\r\n    if (iteratee != null) iteratee = cb(iteratee, context);\r\n    var result = [];\r\n    var seen = [];\r\n    for (var i = 0, length = getLength(array); i < length; i++) {\r\n      var value = array[i],\r\n          computed = iteratee ? iteratee(value, i, array) : value;\r\n      if (isSorted && !iteratee) {\r\n        if (!i || seen !== computed) result.push(value);\r\n        seen = computed;\r\n      } else if (iteratee) {\r\n        if (!_.contains(seen, computed)) {\r\n          seen.push(computed);\r\n          result.push(value);\r\n        }\r\n      } else if (!_.contains(result, value)) {\r\n        result.push(value);\r\n      }\r\n    }\r\n    return result;\r\n  };\r\n\r\n  // Produce an array that contains the union: each distinct element from all of\r\n  // the passed-in arrays.\r\n  _.union = restArguments(function(arrays) {\r\n    return _.uniq(flatten(arrays, true, true));\r\n  });\r\n\r\n  // Produce an array that contains every item shared between all the\r\n  // passed-in arrays.\r\n  _.intersection = function(array) {\r\n    var result = [];\r\n    var argsLength = arguments.length;\r\n    for (var i = 0, length = getLength(array); i < length; i++) {\r\n      var item = array[i];\r\n      if (_.contains(result, item)) continue;\r\n      var j;\r\n      for (j = 1; j < argsLength; j++) {\r\n        if (!_.contains(arguments[j], item)) break;\r\n      }\r\n      if (j === argsLength) result.push(item);\r\n    }\r\n    return result;\r\n  };\r\n\r\n  // Take the difference between one array and a number of other arrays.\r\n  // Only the elements present in just the first array will remain.\r\n  _.difference = restArguments(function(array, rest) {\r\n    rest = flatten(rest, true, true);\r\n    return _.filter(array, function(value){\r\n      return !_.contains(rest, value);\r\n    });\r\n  });\r\n\r\n  // Complement of _.zip. Unzip accepts an array of arrays and groups\r\n  // each array's elements on shared indices.\r\n  _.unzip = function(array) {\r\n    var length = array && _.max(array, getLength).length || 0;\r\n    var result = Array(length);\r\n\r\n    for (var index = 0; index < length; index++) {\r\n      result[index] = _.pluck(array, index);\r\n    }\r\n    return result;\r\n  };\r\n\r\n  // Zip together multiple lists into a single array -- elements that share\r\n  // an index go together.\r\n  _.zip = restArguments(_.unzip);\r\n\r\n  // Converts lists into objects. Pass either a single array of `[key, value]`\r\n  // pairs, or two parallel arrays of the same length -- one of keys, and one of\r\n  // the corresponding values. Passing by pairs is the reverse of _.pairs.\r\n  _.object = function(list, values) {\r\n    var result = {};\r\n    for (var i = 0, length = getLength(list); i < length; i++) {\r\n      if (values) {\r\n        result[list[i]] = values[i];\r\n      } else {\r\n        result[list[i][0]] = list[i][1];\r\n      }\r\n    }\r\n    return result;\r\n  };\r\n\r\n  // Generator function to create the findIndex and findLastIndex functions.\r\n  var createPredicateIndexFinder = function(dir) {\r\n    return function(array, predicate, context) {\r\n      predicate = cb(predicate, context);\r\n      var length = getLength(array);\r\n      var index = dir > 0 ? 0 : length - 1;\r\n      for (; index >= 0 && index < length; index += dir) {\r\n        if (predicate(array[index], index, array)) return index;\r\n      }\r\n      return -1;\r\n    };\r\n  };\r\n\r\n  // Returns the first index on an array-like that passes a predicate test.\r\n  _.findIndex = createPredicateIndexFinder(1);\r\n  _.findLastIndex = createPredicateIndexFinder(-1);\r\n\r\n  // Use a comparator function to figure out the smallest index at which\r\n  // an object should be inserted so as to maintain order. Uses binary search.\r\n  _.sortedIndex = function(array, obj, iteratee, context) {\r\n    iteratee = cb(iteratee, context, 1);\r\n    var value = iteratee(obj);\r\n    var low = 0, high = getLength(array);\r\n    while (low < high) {\r\n      var mid = Math.floor((low + high) / 2);\r\n      if (iteratee(array[mid]) < value) low = mid + 1; else high = mid;\r\n    }\r\n    return low;\r\n  };\r\n\r\n  // Generator function to create the indexOf and lastIndexOf functions.\r\n  var createIndexFinder = function(dir, predicateFind, sortedIndex) {\r\n    return function(array, item, idx) {\r\n      var i = 0, length = getLength(array);\r\n      if (typeof idx == 'number') {\r\n        if (dir > 0) {\r\n          i = idx >= 0 ? idx : Math.max(idx + length, i);\r\n        } else {\r\n          length = idx >= 0 ? Math.min(idx + 1, length) : idx + length + 1;\r\n        }\r\n      } else if (sortedIndex && idx && length) {\r\n        idx = sortedIndex(array, item);\r\n        return array[idx] === item ? idx : -1;\r\n      }\r\n      if (item !== item) {\r\n        idx = predicateFind(slice.call(array, i, length), _.isNaN);\r\n        return idx >= 0 ? idx + i : -1;\r\n      }\r\n      for (idx = dir > 0 ? i : length - 1; idx >= 0 && idx < length; idx += dir) {\r\n        if (array[idx] === item) return idx;\r\n      }\r\n      return -1;\r\n    };\r\n  };\r\n\r\n  // Return the position of the first occurrence of an item in an array,\r\n  // or -1 if the item is not included in the array.\r\n  // If the array is large and already in sort order, pass `true`\r\n  // for **isSorted** to use binary search.\r\n  _.indexOf = createIndexFinder(1, _.findIndex, _.sortedIndex);\r\n  _.lastIndexOf = createIndexFinder(-1, _.findLastIndex);\r\n\r\n  // Generate an integer Array containing an arithmetic progression. A port of\r\n  // the native Python `range()` function. See\r\n  // [the Python documentation](http://docs.python.org/library/functions.html#range).\r\n  _.range = function(start, stop, step) {\r\n    if (stop == null) {\r\n      stop = start || 0;\r\n      start = 0;\r\n    }\r\n    if (!step) {\r\n      step = stop < start ? -1 : 1;\r\n    }\r\n\r\n    var length = Math.max(Math.ceil((stop - start) / step), 0);\r\n    var range = Array(length);\r\n\r\n    for (var idx = 0; idx < length; idx++, start += step) {\r\n      range[idx] = start;\r\n    }\r\n\r\n    return range;\r\n  };\r\n\r\n  // Chunk a single array into multiple arrays, each containing `count` or fewer\r\n  // items.\r\n  _.chunk = function(array, count) {\r\n    if (count == null || count < 1) return [];\r\n    var result = [];\r\n    var i = 0, length = array.length;\r\n    while (i < length) {\r\n      result.push(slice.call(array, i, i += count));\r\n    }\r\n    return result;\r\n  };\r\n\r\n  // Function (ahem) Functions\r\n  // ------------------\r\n\r\n  // Determines whether to execute a function as a constructor\r\n  // or a normal function with the provided arguments.\r\n  var executeBound = function(sourceFunc, boundFunc, context, callingContext, args) {\r\n    if (!(callingContext instanceof boundFunc)) return sourceFunc.apply(context, args);\r\n    var self = baseCreate(sourceFunc.prototype);\r\n    var result = sourceFunc.apply(self, args);\r\n    if (_.isObject(result)) return result;\r\n    return self;\r\n  };\r\n\r\n  // Create a function bound to a given object (assigning `this`, and arguments,\r\n  // optionally). Delegates to **ECMAScript 5**'s native `Function.bind` if\r\n  // available.\r\n  _.bind = restArguments(function(func, context, args) {\r\n    if (!_.isFunction(func)) throw new TypeError('Bind must be called on a function');\r\n    var bound = restArguments(function(callArgs) {\r\n      return executeBound(func, bound, context, this, args.concat(callArgs));\r\n    });\r\n    return bound;\r\n  });\r\n\r\n  // Partially apply a function by creating a version that has had some of its\r\n  // arguments pre-filled, without changing its dynamic `this` context. _ acts\r\n  // as a placeholder by default, allowing any combination of arguments to be\r\n  // pre-filled. Set `_.partial.placeholder` for a custom placeholder argument.\r\n  _.partial = restArguments(function(func, boundArgs) {\r\n    var placeholder = _.partial.placeholder;\r\n    var bound = function() {\r\n      var position = 0, length = boundArgs.length;\r\n      var args = Array(length);\r\n      for (var i = 0; i < length; i++) {\r\n        args[i] = boundArgs[i] === placeholder ? arguments[position++] : boundArgs[i];\r\n      }\r\n      while (position < arguments.length) args.push(arguments[position++]);\r\n      return executeBound(func, bound, this, this, args);\r\n    };\r\n    return bound;\r\n  });\r\n\r\n  _.partial.placeholder = _;\r\n\r\n  // Bind a number of an object's methods to that object. Remaining arguments\r\n  // are the method names to be bound. Useful for ensuring that all callbacks\r\n  // defined on an object belong to it.\r\n  _.bindAll = restArguments(function(obj, keys) {\r\n    keys = flatten(keys, false, false);\r\n    var index = keys.length;\r\n    if (index < 1) throw new Error('bindAll must be passed function names');\r\n    while (index--) {\r\n      var key = keys[index];\r\n      obj[key] = _.bind(obj[key], obj);\r\n    }\r\n  });\r\n\r\n  // Memoize an expensive function by storing its results.\r\n  _.memoize = function(func, hasher) {\r\n    var memoize = function(key) {\r\n      var cache = memoize.cache;\r\n      var address = '' + (hasher ? hasher.apply(this, arguments) : key);\r\n      if (!has(cache, address)) cache[address] = func.apply(this, arguments);\r\n      return cache[address];\r\n    };\r\n    memoize.cache = {};\r\n    return memoize;\r\n  };\r\n\r\n  // Delays a function for the given number of milliseconds, and then calls\r\n  // it with the arguments supplied.\r\n  _.delay = restArguments(function(func, wait, args) {\r\n    return setTimeout(function() {\r\n      return func.apply(null, args);\r\n    }, wait);\r\n  });\r\n\r\n  // Defers a function, scheduling it to run after the current call stack has\r\n  // cleared.\r\n  _.defer = _.partial(_.delay, _, 1);\r\n\r\n  // Returns a function, that, when invoked, will only be triggered at most once\r\n  // during a given window of time. Normally, the throttled function will run\r\n  // as much as it can, without ever going more than once per `wait` duration;\r\n  // but if you'd like to disable the execution on the leading edge, pass\r\n  // `{leading: false}`. To disable execution on the trailing edge, ditto.\r\n  _.throttle = function(func, wait, options) {\r\n    var timeout, context, args, result;\r\n    var previous = 0;\r\n    if (!options) options = {};\r\n\r\n    var later = function() {\r\n      previous = options.leading === false ? 0 : _.now();\r\n      timeout = null;\r\n      result = func.apply(context, args);\r\n      if (!timeout) context = args = null;\r\n    };\r\n\r\n    var throttled = function() {\r\n      var now = _.now();\r\n      if (!previous && options.leading === false) previous = now;\r\n      var remaining = wait - (now - previous);\r\n      context = this;\r\n      args = arguments;\r\n      if (remaining <= 0 || remaining > wait) {\r\n        if (timeout) {\r\n          clearTimeout(timeout);\r\n          timeout = null;\r\n        }\r\n        previous = now;\r\n        result = func.apply(context, args);\r\n        if (!timeout) context = args = null;\r\n      } else if (!timeout && options.trailing !== false) {\r\n        timeout = setTimeout(later, remaining);\r\n      }\r\n      return result;\r\n    };\r\n\r\n    throttled.cancel = function() {\r\n      clearTimeout(timeout);\r\n      previous = 0;\r\n      timeout = context = args = null;\r\n    };\r\n\r\n    return throttled;\r\n  };\r\n\r\n  // Returns a function, that, as long as it continues to be invoked, will not\r\n  // be triggered. The function will be called after it stops being called for\r\n  // N milliseconds. If `immediate` is passed, trigger the function on the\r\n  // leading edge, instead of the trailing.\r\n  _.debounce = function(func, wait, immediate) {\r\n    var timeout, result;\r\n\r\n    var later = function(context, args) {\r\n      timeout = null;\r\n      if (args) result = func.apply(context, args);\r\n    };\r\n\r\n    var debounced = restArguments(function(args) {\r\n      if (timeout) clearTimeout(timeout);\r\n      if (immediate) {\r\n        var callNow = !timeout;\r\n        timeout = setTimeout(later, wait);\r\n        if (callNow) result = func.apply(this, args);\r\n      } else {\r\n        timeout = _.delay(later, wait, this, args);\r\n      }\r\n\r\n      return result;\r\n    });\r\n\r\n    debounced.cancel = function() {\r\n      clearTimeout(timeout);\r\n      timeout = null;\r\n    };\r\n\r\n    return debounced;\r\n  };\r\n\r\n  // Returns the first function passed as an argument to the second,\r\n  // allowing you to adjust arguments, run code before and after, and\r\n  // conditionally execute the original function.\r\n  _.wrap = function(func, wrapper) {\r\n    return _.partial(wrapper, func);\r\n  };\r\n\r\n  // Returns a negated version of the passed-in predicate.\r\n  _.negate = function(predicate) {\r\n    return function() {\r\n      return !predicate.apply(this, arguments);\r\n    };\r\n  };\r\n\r\n  // Returns a function that is the composition of a list of functions, each\r\n  // consuming the return value of the function that follows.\r\n  _.compose = function() {\r\n    var args = arguments;\r\n    var start = args.length - 1;\r\n    return function() {\r\n      var i = start;\r\n      var result = args[start].apply(this, arguments);\r\n      while (i--) result = args[i].call(this, result);\r\n      return result;\r\n    };\r\n  };\r\n\r\n  // Returns a function that will only be executed on and after the Nth call.\r\n  _.after = function(times, func) {\r\n    return function() {\r\n      if (--times < 1) {\r\n        return func.apply(this, arguments);\r\n      }\r\n    };\r\n  };\r\n\r\n  // Returns a function that will only be executed up to (but not including) the Nth call.\r\n  _.before = function(times, func) {\r\n    var memo;\r\n    return function() {\r\n      if (--times > 0) {\r\n        memo = func.apply(this, arguments);\r\n      }\r\n      if (times <= 1) func = null;\r\n      return memo;\r\n    };\r\n  };\r\n\r\n  // Returns a function that will be executed at most one time, no matter how\r\n  // often you call it. Useful for lazy initialization.\r\n  _.once = _.partial(_.before, 2);\r\n\r\n  _.restArguments = restArguments;\r\n\r\n  // Object Functions\r\n  // ----------------\r\n\r\n  // Keys in IE < 9 that won't be iterated by `for key in ...` and thus missed.\r\n  var hasEnumBug = !{toString: null}.propertyIsEnumerable('toString');\r\n  var nonEnumerableProps = ['valueOf', 'isPrototypeOf', 'toString',\r\n    'propertyIsEnumerable', 'hasOwnProperty', 'toLocaleString'];\r\n\r\n  var collectNonEnumProps = function(obj, keys) {\r\n    var nonEnumIdx = nonEnumerableProps.length;\r\n    var constructor = obj.constructor;\r\n    var proto = _.isFunction(constructor) && constructor.prototype || ObjProto;\r\n\r\n    // Constructor is a special case.\r\n    var prop = 'constructor';\r\n    if (has(obj, prop) && !_.contains(keys, prop)) keys.push(prop);\r\n\r\n    while (nonEnumIdx--) {\r\n      prop = nonEnumerableProps[nonEnumIdx];\r\n      if (prop in obj && obj[prop] !== proto[prop] && !_.contains(keys, prop)) {\r\n        keys.push(prop);\r\n      }\r\n    }\r\n  };\r\n\r\n  // Retrieve the names of an object's own properties.\r\n  // Delegates to **ECMAScript 5**'s native `Object.keys`.\r\n  _.keys = function(obj) {\r\n    if (!_.isObject(obj)) return [];\r\n    if (nativeKeys) return nativeKeys(obj);\r\n    var keys = [];\r\n    for (var key in obj) if (has(obj, key)) keys.push(key);\r\n    // Ahem, IE < 9.\r\n    if (hasEnumBug) collectNonEnumProps(obj, keys);\r\n    return keys;\r\n  };\r\n\r\n  // Retrieve all the property names of an object.\r\n  _.allKeys = function(obj) {\r\n    if (!_.isObject(obj)) return [];\r\n    var keys = [];\r\n    for (var key in obj) keys.push(key);\r\n    // Ahem, IE < 9.\r\n    if (hasEnumBug) collectNonEnumProps(obj, keys);\r\n    return keys;\r\n  };\r\n\r\n  // Retrieve the values of an object's properties.\r\n  _.values = function(obj) {\r\n    var keys = _.keys(obj);\r\n    var length = keys.length;\r\n    var values = Array(length);\r\n    for (var i = 0; i < length; i++) {\r\n      values[i] = obj[keys[i]];\r\n    }\r\n    return values;\r\n  };\r\n\r\n  // Returns the results of applying the iteratee to each element of the object.\r\n  // In contrast to _.map it returns an object.\r\n  _.mapObject = function(obj, iteratee, context) {\r\n    iteratee = cb(iteratee, context);\r\n    var keys = _.keys(obj),\r\n        length = keys.length,\r\n        results = {};\r\n    for (var index = 0; index < length; index++) {\r\n      var currentKey = keys[index];\r\n      results[currentKey] = iteratee(obj[currentKey], currentKey, obj);\r\n    }\r\n    return results;\r\n  };\r\n\r\n  // Convert an object into a list of `[key, value]` pairs.\r\n  // The opposite of _.object.\r\n  _.pairs = function(obj) {\r\n    var keys = _.keys(obj);\r\n    var length = keys.length;\r\n    var pairs = Array(length);\r\n    for (var i = 0; i < length; i++) {\r\n      pairs[i] = [keys[i], obj[keys[i]]];\r\n    }\r\n    return pairs;\r\n  };\r\n\r\n  // Invert the keys and values of an object. The values must be serializable.\r\n  _.invert = function(obj) {\r\n    var result = {};\r\n    var keys = _.keys(obj);\r\n    for (var i = 0, length = keys.length; i < length; i++) {\r\n      result[obj[keys[i]]] = keys[i];\r\n    }\r\n    return result;\r\n  };\r\n\r\n  // Return a sorted list of the function names available on the object.\r\n  // Aliased as `methods`.\r\n  _.functions = _.methods = function(obj) {\r\n    var names = [];\r\n    for (var key in obj) {\r\n      if (_.isFunction(obj[key])) names.push(key);\r\n    }\r\n    return names.sort();\r\n  };\r\n\r\n  // An internal function for creating assigner functions.\r\n  var createAssigner = function(keysFunc, defaults) {\r\n    return function(obj) {\r\n      var length = arguments.length;\r\n      if (defaults) obj = Object(obj);\r\n      if (length < 2 || obj == null) return obj;\r\n      for (var index = 1; index < length; index++) {\r\n        var source = arguments[index],\r\n            keys = keysFunc(source),\r\n            l = keys.length;\r\n        for (var i = 0; i < l; i++) {\r\n          var key = keys[i];\r\n          if (!defaults || obj[key] === void 0) obj[key] = source[key];\r\n        }\r\n      }\r\n      return obj;\r\n    };\r\n  };\r\n\r\n  // Extend a given object with all the properties in passed-in object(s).\r\n  _.extend = createAssigner(_.allKeys);\r\n\r\n  // Assigns a given object with all the own properties in the passed-in object(s).\r\n  // (https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object/assign)\r\n  _.extendOwn = _.assign = createAssigner(_.keys);\r\n\r\n  // Returns the first key on an object that passes a predicate test.\r\n  _.findKey = function(obj, predicate, context) {\r\n    predicate = cb(predicate, context);\r\n    var keys = _.keys(obj), key;\r\n    for (var i = 0, length = keys.length; i < length; i++) {\r\n      key = keys[i];\r\n      if (predicate(obj[key], key, obj)) return key;\r\n    }\r\n  };\r\n\r\n  // Internal pick helper function to determine if `obj` has key `key`.\r\n  var keyInObj = function(value, key, obj) {\r\n    return key in obj;\r\n  };\r\n\r\n  // Return a copy of the object only containing the whitelisted properties.\r\n  _.pick = restArguments(function(obj, keys) {\r\n    var result = {}, iteratee = keys[0];\r\n    if (obj == null) return result;\r\n    if (_.isFunction(iteratee)) {\r\n      if (keys.length > 1) iteratee = optimizeCb(iteratee, keys[1]);\r\n      keys = _.allKeys(obj);\r\n    } else {\r\n      iteratee = keyInObj;\r\n      keys = flatten(keys, false, false);\r\n      obj = Object(obj);\r\n    }\r\n    for (var i = 0, length = keys.length; i < length; i++) {\r\n      var key = keys[i];\r\n      var value = obj[key];\r\n      if (iteratee(value, key, obj)) result[key] = value;\r\n    }\r\n    return result;\r\n  });\r\n\r\n  // Return a copy of the object without the blacklisted properties.\r\n  _.omit = restArguments(function(obj, keys) {\r\n    var iteratee = keys[0], context;\r\n    if (_.isFunction(iteratee)) {\r\n      iteratee = _.negate(iteratee);\r\n      if (keys.length > 1) context = keys[1];\r\n    } else {\r\n      keys = _.map(flatten(keys, false, false), String);\r\n      iteratee = function(value, key) {\r\n        return !_.contains(keys, key);\r\n      };\r\n    }\r\n    return _.pick(obj, iteratee, context);\r\n  });\r\n\r\n  // Fill in a given object with default properties.\r\n  _.defaults = createAssigner(_.allKeys, true);\r\n\r\n  // Creates an object that inherits from the given prototype object.\r\n  // If additional properties are provided then they will be added to the\r\n  // created object.\r\n  _.create = function(prototype, props) {\r\n    var result = baseCreate(prototype);\r\n    if (props) _.extendOwn(result, props);\r\n    return result;\r\n  };\r\n\r\n  // Create a (shallow-cloned) duplicate of an object.\r\n  _.clone = function(obj) {\r\n    if (!_.isObject(obj)) return obj;\r\n    return _.isArray(obj) ? obj.slice() : _.extend({}, obj);\r\n  };\r\n\r\n  // Invokes interceptor with the obj, and then returns obj.\r\n  // The primary purpose of this method is to \"tap into\" a method chain, in\r\n  // order to perform operations on intermediate results within the chain.\r\n  _.tap = function(obj, interceptor) {\r\n    interceptor(obj);\r\n    return obj;\r\n  };\r\n\r\n  // Returns whether an object has a given set of `key:value` pairs.\r\n  _.isMatch = function(object, attrs) {\r\n    var keys = _.keys(attrs), length = keys.length;\r\n    if (object == null) return !length;\r\n    var obj = Object(object);\r\n    for (var i = 0; i < length; i++) {\r\n      var key = keys[i];\r\n      if (attrs[key] !== obj[key] || !(key in obj)) return false;\r\n    }\r\n    return true;\r\n  };\r\n\r\n\r\n  // Internal recursive comparison function for `isEqual`.\r\n  var eq, deepEq;\r\n  eq = function(a, b, aStack, bStack) {\r\n    // Identical objects are equal. `0 === -0`, but they aren't identical.\r\n    // See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).\r\n    if (a === b) return a !== 0 || 1 / a === 1 / b;\r\n    // `null` or `undefined` only equal to itself (strict comparison).\r\n    if (a == null || b == null) return false;\r\n    // `NaN`s are equivalent, but non-reflexive.\r\n    if (a !== a) return b !== b;\r\n    // Exhaust primitive checks\r\n    var type = typeof a;\r\n    if (type !== 'function' && type !== 'object' && typeof b != 'object') return false;\r\n    return deepEq(a, b, aStack, bStack);\r\n  };\r\n\r\n  // Internal recursive comparison function for `isEqual`.\r\n  deepEq = function(a, b, aStack, bStack) {\r\n    // Unwrap any wrapped objects.\r\n    if (a instanceof _) a = a._wrapped;\r\n    if (b instanceof _) b = b._wrapped;\r\n    // Compare `[[Class]]` names.\r\n    var className = toString.call(a);\r\n    if (className !== toString.call(b)) return false;\r\n    switch (className) {\r\n      // Strings, numbers, regular expressions, dates, and booleans are compared by value.\r\n      case '[object RegExp]':\r\n      // RegExps are coerced to strings for comparison (Note: '' + /a/i === '/a/i')\r\n      case '[object String]':\r\n        // Primitives and their corresponding object wrappers are equivalent; thus, `\"5\"` is\r\n        // equivalent to `new String(\"5\")`.\r\n        return '' + a === '' + b;\r\n      case '[object Number]':\r\n        // `NaN`s are equivalent, but non-reflexive.\r\n        // Object(NaN) is equivalent to NaN.\r\n        if (+a !== +a) return +b !== +b;\r\n        // An `egal` comparison is performed for other numeric values.\r\n        return +a === 0 ? 1 / +a === 1 / b : +a === +b;\r\n      case '[object Date]':\r\n      case '[object Boolean]':\r\n        // Coerce dates and booleans to numeric primitive values. Dates are compared by their\r\n        // millisecond representations. Note that invalid dates with millisecond representations\r\n        // of `NaN` are not equivalent.\r\n        return +a === +b;\r\n      case '[object Symbol]':\r\n        return SymbolProto.valueOf.call(a) === SymbolProto.valueOf.call(b);\r\n    }\r\n\r\n    var areArrays = className === '[object Array]';\r\n    if (!areArrays) {\r\n      if (typeof a != 'object' || typeof b != 'object') return false;\r\n\r\n      // Objects with different constructors are not equivalent, but `Object`s or `Array`s\r\n      // from different frames are.\r\n      var aCtor = a.constructor, bCtor = b.constructor;\r\n      if (aCtor !== bCtor && !(_.isFunction(aCtor) && aCtor instanceof aCtor &&\r\n                               _.isFunction(bCtor) && bCtor instanceof bCtor)\r\n                          && ('constructor' in a && 'constructor' in b)) {\r\n        return false;\r\n      }\r\n    }\r\n    // Assume equality for cyclic structures. The algorithm for detecting cyclic\r\n    // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.\r\n\r\n    // Initializing stack of traversed objects.\r\n    // It's done here since we only need them for objects and arrays comparison.\r\n    aStack = aStack || [];\r\n    bStack = bStack || [];\r\n    var length = aStack.length;\r\n    while (length--) {\r\n      // Linear search. Performance is inversely proportional to the number of\r\n      // unique nested structures.\r\n      if (aStack[length] === a) return bStack[length] === b;\r\n    }\r\n\r\n    // Add the first object to the stack of traversed objects.\r\n    aStack.push(a);\r\n    bStack.push(b);\r\n\r\n    // Recursively compare objects and arrays.\r\n    if (areArrays) {\r\n      // Compare array lengths to determine if a deep comparison is necessary.\r\n      length = a.length;\r\n      if (length !== b.length) return false;\r\n      // Deep compare the contents, ignoring non-numeric properties.\r\n      while (length--) {\r\n        if (!eq(a[length], b[length], aStack, bStack)) return false;\r\n      }\r\n    } else {\r\n      // Deep compare objects.\r\n      var keys = _.keys(a), key;\r\n      length = keys.length;\r\n      // Ensure that both objects contain the same number of properties before comparing deep equality.\r\n      if (_.keys(b).length !== length) return false;\r\n      while (length--) {\r\n        // Deep compare each member\r\n        key = keys[length];\r\n        if (!(has(b, key) && eq(a[key], b[key], aStack, bStack))) return false;\r\n      }\r\n    }\r\n    // Remove the first object from the stack of traversed objects.\r\n    aStack.pop();\r\n    bStack.pop();\r\n    return true;\r\n  };\r\n\r\n  // Perform a deep comparison to check if two objects are equal.\r\n  _.isEqual = function(a, b) {\r\n    return eq(a, b);\r\n  };\r\n\r\n  // Is a given array, string, or object empty?\r\n  // An \"empty\" object has no enumerable own-properties.\r\n  _.isEmpty = function(obj) {\r\n    if (obj == null) return true;\r\n    if (isArrayLike(obj) && (_.isArray(obj) || _.isString(obj) || _.isArguments(obj))) return obj.length === 0;\r\n    return _.keys(obj).length === 0;\r\n  };\r\n\r\n  // Is a given value a DOM element?\r\n  _.isElement = function(obj) {\r\n    return !!(obj && obj.nodeType === 1);\r\n  };\r\n\r\n  // Is a given value an array?\r\n  // Delegates to ECMA5's native Array.isArray\r\n  _.isArray = nativeIsArray || function(obj) {\r\n    return toString.call(obj) === '[object Array]';\r\n  };\r\n\r\n  // Is a given variable an object?\r\n  _.isObject = function(obj) {\r\n    var type = typeof obj;\r\n    return type === 'function' || type === 'object' && !!obj;\r\n  };\r\n\r\n  // Add some isType methods: isArguments, isFunction, isString, isNumber, isDate, isRegExp, isError, isMap, isWeakMap, isSet, isWeakSet.\r\n  _.each(['Arguments', 'Function', 'String', 'Number', 'Date', 'RegExp', 'Error', 'Symbol', 'Map', 'WeakMap', 'Set', 'WeakSet'], function(name) {\r\n    _['is' + name] = function(obj) {\r\n      return toString.call(obj) === '[object ' + name + ']';\r\n    };\r\n  });\r\n\r\n  // Define a fallback version of the method in browsers (ahem, IE < 9), where\r\n  // there isn't any inspectable \"Arguments\" type.\r\n  if (!_.isArguments(arguments)) {\r\n    _.isArguments = function(obj) {\r\n      return has(obj, 'callee');\r\n    };\r\n  }\r\n\r\n  // Optimize `isFunction` if appropriate. Work around some typeof bugs in old v8,\r\n  // IE 11 (#1621), Safari 8 (#1929), and PhantomJS (#2236).\r\n  var nodelist = root.document && root.document.childNodes;\r\n  if (typeof /./ != 'function' && typeof Int8Array != 'object' && typeof nodelist != 'function') {\r\n    _.isFunction = function(obj) {\r\n      return typeof obj == 'function' || false;\r\n    };\r\n  }\r\n\r\n  // Is a given object a finite number?\r\n  _.isFinite = function(obj) {\r\n    return !_.isSymbol(obj) && isFinite(obj) && !isNaN(parseFloat(obj));\r\n  };\r\n\r\n  // Is the given value `NaN`?\r\n  _.isNaN = function(obj) {\r\n    return _.isNumber(obj) && isNaN(obj);\r\n  };\r\n\r\n  // Is a given value a boolean?\r\n  _.isBoolean = function(obj) {\r\n    return obj === true || obj === false || toString.call(obj) === '[object Boolean]';\r\n  };\r\n\r\n  // Is a given value equal to null?\r\n  _.isNull = function(obj) {\r\n    return obj === null;\r\n  };\r\n\r\n  // Is a given variable undefined?\r\n  _.isUndefined = function(obj) {\r\n    return obj === void 0;\r\n  };\r\n\r\n  // Shortcut function for checking if an object has a given property directly\r\n  // on itself (in other words, not on a prototype).\r\n  _.has = function(obj, path) {\r\n    if (!_.isArray(path)) {\r\n      return has(obj, path);\r\n    }\r\n    var length = path.length;\r\n    for (var i = 0; i < length; i++) {\r\n      var key = path[i];\r\n      if (obj == null || !hasOwnProperty.call(obj, key)) {\r\n        return false;\r\n      }\r\n      obj = obj[key];\r\n    }\r\n    return !!length;\r\n  };\r\n\r\n  // Utility Functions\r\n  // -----------------\r\n\r\n  // Run Underscore.js in *noConflict* mode, returning the `_` variable to its\r\n  // previous owner. Returns a reference to the Underscore object.\r\n  _.noConflict = function() {\r\n    root._ = previousUnderscore;\r\n    return this;\r\n  };\r\n\r\n  // Keep the identity function around for default iteratees.\r\n  _.identity = function(value) {\r\n    return value;\r\n  };\r\n\r\n  // Predicate-generating functions. Often useful outside of Underscore.\r\n  _.constant = function(value) {\r\n    return function() {\r\n      return value;\r\n    };\r\n  };\r\n\r\n  _.noop = function(){};\r\n\r\n  // Creates a function that, when passed an object, will traverse that object’s\r\n  // properties down the given `path`, specified as an array of keys or indexes.\r\n  _.property = function(path) {\r\n    if (!_.isArray(path)) {\r\n      return shallowProperty(path);\r\n    }\r\n    return function(obj) {\r\n      return deepGet(obj, path);\r\n    };\r\n  };\r\n\r\n  // Generates a function for a given object that returns a given property.\r\n  _.propertyOf = function(obj) {\r\n    if (obj == null) {\r\n      return function(){};\r\n    }\r\n    return function(path) {\r\n      return !_.isArray(path) ? obj[path] : deepGet(obj, path);\r\n    };\r\n  };\r\n\r\n  // Returns a predicate for checking whether an object has a given set of\r\n  // `key:value` pairs.\r\n  _.matcher = _.matches = function(attrs) {\r\n    attrs = _.extendOwn({}, attrs);\r\n    return function(obj) {\r\n      return _.isMatch(obj, attrs);\r\n    };\r\n  };\r\n\r\n  // Run a function **n** times.\r\n  _.times = function(n, iteratee, context) {\r\n    var accum = Array(Math.max(0, n));\r\n    iteratee = optimizeCb(iteratee, context, 1);\r\n    for (var i = 0; i < n; i++) accum[i] = iteratee(i);\r\n    return accum;\r\n  };\r\n\r\n  // Return a random integer between min and max (inclusive).\r\n  _.random = function(min, max) {\r\n    if (max == null) {\r\n      max = min;\r\n      min = 0;\r\n    }\r\n    return min + Math.floor(Math.random() * (max - min + 1));\r\n  };\r\n\r\n  // A (possibly faster) way to get the current timestamp as an integer.\r\n  _.now = Date.now || function() {\r\n    return new Date().getTime();\r\n  };\r\n\r\n  // List of HTML entities for escaping.\r\n  var escapeMap = {\r\n    '&': '&amp;',\r\n    '<': '&lt;',\r\n    '>': '&gt;',\r\n    '\"': '&quot;',\r\n    \"'\": '&#x27;',\r\n    '`': '&#x60;'\r\n  };\r\n  var unescapeMap = _.invert(escapeMap);\r\n\r\n  // Functions for escaping and unescaping strings to/from HTML interpolation.\r\n  var createEscaper = function(map) {\r\n    var escaper = function(match) {\r\n      return map[match];\r\n    };\r\n    // Regexes for identifying a key that needs to be escaped.\r\n    var source = '(?:' + _.keys(map).join('|') + ')';\r\n    var testRegexp = RegExp(source);\r\n    var replaceRegexp = RegExp(source, 'g');\r\n    return function(string) {\r\n      string = string == null ? '' : '' + string;\r\n      return testRegexp.test(string) ? string.replace(replaceRegexp, escaper) : string;\r\n    };\r\n  };\r\n  _.escape = createEscaper(escapeMap);\r\n  _.unescape = createEscaper(unescapeMap);\r\n\r\n  // Traverses the children of `obj` along `path`. If a child is a function, it\r\n  // is invoked with its parent as context. Returns the value of the final\r\n  // child, or `fallback` if any child is undefined.\r\n  _.result = function(obj, path, fallback) {\r\n    if (!_.isArray(path)) path = [path];\r\n    var length = path.length;\r\n    if (!length) {\r\n      return _.isFunction(fallback) ? fallback.call(obj) : fallback;\r\n    }\r\n    for (var i = 0; i < length; i++) {\r\n      var prop = obj == null ? void 0 : obj[path[i]];\r\n      if (prop === void 0) {\r\n        prop = fallback;\r\n        i = length; // Ensure we don't continue iterating.\r\n      }\r\n      obj = _.isFunction(prop) ? prop.call(obj) : prop;\r\n    }\r\n    return obj;\r\n  };\r\n\r\n  // Generate a unique integer id (unique within the entire client session).\r\n  // Useful for temporary DOM ids.\r\n  var idCounter = 0;\r\n  _.uniqueId = function(prefix) {\r\n    var id = ++idCounter + '';\r\n    return prefix ? prefix + id : id;\r\n  };\r\n\r\n  // By default, Underscore uses ERB-style template delimiters, change the\r\n  // following template settings to use alternative delimiters.\r\n  _.templateSettings = {\r\n    evaluate: /<%([\\s\\S]+?)%>/g,\r\n    interpolate: /<%=([\\s\\S]+?)%>/g,\r\n    escape: /<%-([\\s\\S]+?)%>/g\r\n  };\r\n\r\n  // When customizing `templateSettings`, if you don't want to define an\r\n  // interpolation, evaluation or escaping regex, we need one that is\r\n  // guaranteed not to match.\r\n  var noMatch = /(.)^/;\r\n\r\n  // Certain characters need to be escaped so that they can be put into a\r\n  // string literal.\r\n  var escapes = {\r\n    \"'\": \"'\",\r\n    '\\\\': '\\\\',\r\n    '\\r': 'r',\r\n    '\\n': 'n',\r\n    '\\u2028': 'u2028',\r\n    '\\u2029': 'u2029'\r\n  };\r\n\r\n  var escapeRegExp = /\\\\|'|\\r|\\n|\\u2028|\\u2029/g;\r\n\r\n  var escapeChar = function(match) {\r\n    return '\\\\' + escapes[match];\r\n  };\r\n\r\n  // JavaScript micro-templating, similar to John Resig's implementation.\r\n  // Underscore templating handles arbitrary delimiters, preserves whitespace,\r\n  // and correctly escapes quotes within interpolated code.\r\n  // NB: `oldSettings` only exists for backwards compatibility.\r\n  _.template = function(text, settings, oldSettings) {\r\n    if (!settings && oldSettings) settings = oldSettings;\r\n    settings = _.defaults({}, settings, _.templateSettings);\r\n\r\n    // Combine delimiters into one regular expression via alternation.\r\n    var matcher = RegExp([\r\n      (settings.escape || noMatch).source,\r\n      (settings.interpolate || noMatch).source,\r\n      (settings.evaluate || noMatch).source\r\n    ].join('|') + '|$', 'g');\r\n\r\n    // Compile the template source, escaping string literals appropriately.\r\n    var index = 0;\r\n    var source = \"__p+='\";\r\n    text.replace(matcher, function(match, escape, interpolate, evaluate, offset) {\r\n      source += text.slice(index, offset).replace(escapeRegExp, escapeChar);\r\n      index = offset + match.length;\r\n\r\n      if (escape) {\r\n        source += \"'+\\n((__t=(\" + escape + \"))==null?'':_.escape(__t))+\\n'\";\r\n      } else if (interpolate) {\r\n        source += \"'+\\n((__t=(\" + interpolate + \"))==null?'':__t)+\\n'\";\r\n      } else if (evaluate) {\r\n        source += \"';\\n\" + evaluate + \"\\n__p+='\";\r\n      }\r\n\r\n      // Adobe VMs need the match returned to produce the correct offset.\r\n      return match;\r\n    });\r\n    source += \"';\\n\";\r\n\r\n    // If a variable is not specified, place data values in local scope.\r\n    if (!settings.variable) source = 'with(obj||{}){\\n' + source + '}\\n';\r\n\r\n    source = \"var __t,__p='',__j=Array.prototype.join,\" +\r\n      \"print=function(){__p+=__j.call(arguments,'');};\\n\" +\r\n      source + 'return __p;\\n';\r\n\r\n    var render;\r\n    try {\r\n      render = new Function(settings.variable || 'obj', '_', source);\r\n    } catch (e) {\r\n      e.source = source;\r\n      throw e;\r\n    }\r\n\r\n    var template = function(data) {\r\n      return render.call(this, data, _);\r\n    };\r\n\r\n    // Provide the compiled source as a convenience for precompilation.\r\n    var argument = settings.variable || 'obj';\r\n    template.source = 'function(' + argument + '){\\n' + source + '}';\r\n\r\n    return template;\r\n  };\r\n\r\n  // Add a \"chain\" function. Start chaining a wrapped Underscore object.\r\n  _.chain = function(obj) {\r\n    var instance = _(obj);\r\n    instance._chain = true;\r\n    return instance;\r\n  };\r\n\r\n  // OOP\r\n  // ---------------\r\n  // If Underscore is called as a function, it returns a wrapped object that\r\n  // can be used OO-style. This wrapper holds altered versions of all the\r\n  // underscore functions. Wrapped objects may be chained.\r\n\r\n  // Helper function to continue chaining intermediate results.\r\n  var chainResult = function(instance, obj) {\r\n    return instance._chain ? _(obj).chain() : obj;\r\n  };\r\n\r\n  // Add your own custom functions to the Underscore object.\r\n  _.mixin = function(obj) {\r\n    _.each(_.functions(obj), function(name) {\r\n      var func = _[name] = obj[name];\r\n      _.prototype[name] = function() {\r\n        var args = [this._wrapped];\r\n        push.apply(args, arguments);\r\n        return chainResult(this, func.apply(_, args));\r\n      };\r\n    });\r\n    return _;\r\n  };\r\n\r\n  // Add all of the Underscore functions to the wrapper object.\r\n  _.mixin(_);\r\n\r\n  // Add all mutator Array functions to the wrapper.\r\n  _.each(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function(name) {\r\n    var method = ArrayProto[name];\r\n    _.prototype[name] = function() {\r\n      var obj = this._wrapped;\r\n      method.apply(obj, arguments);\r\n      if ((name === 'shift' || name === 'splice') && obj.length === 0) delete obj[0];\r\n      return chainResult(this, obj);\r\n    };\r\n  });\r\n\r\n  // Add all accessor Array functions to the wrapper.\r\n  _.each(['concat', 'join', 'slice'], function(name) {\r\n    var method = ArrayProto[name];\r\n    _.prototype[name] = function() {\r\n      return chainResult(this, method.apply(this._wrapped, arguments));\r\n    };\r\n  });\r\n\r\n  // Extracts the result from a wrapped and chained object.\r\n  _.prototype.value = function() {\r\n    return this._wrapped;\r\n  };\r\n\r\n  // Provide unwrapping proxy for some methods used in engine operations\r\n  // such as arithmetic and JSON stringification.\r\n  _.prototype.valueOf = _.prototype.toJSON = _.prototype.value;\r\n\r\n  _.prototype.toString = function() {\r\n    return String(this._wrapped);\r\n  };\r\n\r\n  skylark.itg = skyalrk.itg || {};\r\n  return skylark.itg.underscore = _;\r\n});\ndefine('skylark-underscore/main',[\r\n\t\"./underscore\"\r\n],function(_){\r\n\treturn _;\r\n});\ndefine('skylark-underscore', ['skylark-underscore/main'], function (main) { return main; });\n\n"]}